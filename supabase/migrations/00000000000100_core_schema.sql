-- Enable required extensions
create extension if not exists "pgcrypto";

-- Helper function to identify staff users
create or replace function public.is_staff()
returns boolean
language sql
security definer
set search_path = public
stable
as
$$
  select exists (
    select 1
    from public.staff_roles sr
    where sr.user_id = auth.uid()
  );
$$;

-- Companies table
create table if not exists public.companies (
  id uuid primary key default gen_random_uuid(),
  name text not null,
  kind text,
  bio text,
  website text,
  created_at timestamptz not null default timezone('utc'::text, now()),
  updated_at timestamptz not null default timezone('utc'::text, now())
);

-- Users table (profile projection from auth.users)
create table if not exists public.users (
  id uuid primary key default gen_random_uuid(),
  email text unique not null,
  name text not null,
  phone text,
  role text check (role in ('investor','buyer','seller','attendee','staff')) not null,
  company_id uuid references public.companies (id) on delete set null,
  verified_at timestamptz,
  created_at timestamptz not null default timezone('utc'::text, now())
);

-- Staff roles
create table if not exists public.staff_roles (
  user_id uuid primary key references public.users (id) on delete cascade,
  staff_role text check (staff_role in ('operator','supervisor','admin')) not null,
  assigned_at timestamptz not null default timezone('utc'::text, now())
);

-- Audit logs
create table if not exists public.audit_logs (
  id bigint generated by default as identity primary key,
  actor_id uuid references public.users (id),
  action text not null,
  object_type text not null,
  object_id text not null,
  diff jsonb,
  created_at timestamptz not null default timezone('utc'::text, now())
);

-- Event settings singleton
create table if not exists public.event_settings (
  id uuid primary key default gen_random_uuid(),
  name text not null default 'afcm',
  start_date date not null,
  end_date date not null,
  timezone text not null default 'Africa/Lagos',
  created_at timestamptz not null default timezone('utc'::text, now()),
  updated_at timestamptz not null default timezone('utc'::text, now())
);

-- Event day schedule (doors open/close)
create table if not exists public.event_days (
  event_date date primary key,
  open_time time not null,
  close_time time not null,
  created_at timestamptz not null default timezone('utc'::text, now())
);

-- Row Level Security
alter table public.companies enable row level security;
alter table public.users enable row level security;
alter table public.staff_roles enable row level security;
alter table public.audit_logs enable row level security;
alter table public.event_settings enable row level security;
alter table public.event_days enable row level security;

-- Policies for companies
create policy companies_public_read
  on public.companies
  for select
  using (true);

create policy companies_staff_manage
  on public.companies
  for all
  using (public.is_staff())
  with check (public.is_staff());

-- Policies for users
create policy users_public_read
  on public.users
  for select
  using (true);

create policy users_self_update
  on public.users
  for update
  using (auth.uid() = id)
  with check (auth.uid() = id);

create policy users_insert_self
  on public.users
  for insert
  with check (auth.uid() = id);

create policy users_staff_manage
  on public.users
  for all
  using (public.is_staff())
  with check (public.is_staff());

-- Policies for staff_roles
create policy staff_roles_staff_read
  on public.staff_roles
  for select
  using (public.is_staff());

create policy staff_roles_admin_manage
  on public.staff_roles
  for all
  using (
    exists (
      select 1 from public.staff_roles sr
      where sr.user_id = auth.uid() and sr.staff_role = 'admin'
    )
  )
  with check (
    exists (
      select 1 from public.staff_roles sr
      where sr.user_id = auth.uid() and sr.staff_role = 'admin'
    )
  );

-- Policies for audit logs (read-only for staff)
create policy audit_logs_staff_read
  on public.audit_logs
  for select
  using (public.is_staff());

-- Event settings policies
create policy event_settings_public_read
  on public.event_settings
  for select
  using (true);

create policy event_settings_staff_manage
  on public.event_settings
  for all
  using (public.is_staff())
  with check (public.is_staff());

-- Event days policies
create policy event_days_public_read
  on public.event_days
  for select
  using (true);

create policy event_days_staff_manage
  on public.event_days
  for all
  using (public.is_staff())
  with check (public.is_staff());

-- Trigger to keep companies.updated_at fresh
create or replace function public.touch_updated_at()
returns trigger
language plpgsql
as
$$
begin
  new.updated_at = timezone('utc', now());
  return new;
end;
$$;

drop trigger if exists companies_touch_updated_at on public.companies;
create trigger companies_touch_updated_at
before update on public.companies
for each row
execute procedure public.touch_updated_at();

drop trigger if exists event_settings_touch_updated_at on public.event_settings;
create trigger event_settings_touch_updated_at
before update on public.event_settings
for each row
execute procedure public.touch_updated_at();
